{"meta":{"title":"Lazyloading的博客","subtitle":"我与我周旋久，宁做我。","description":"iOS开发者Lazyloading个人站，随心发挥，自由写作。","author":"Lazyloading","url":"http://lazyloading.me","root":"/"},"pages":[{"title":"关于","date":"2021-07-22T14:27:28.412Z","updated":"2020-04-26T12:08:01.856Z","comments":false,"path":"about/index.html","permalink":"http://lazyloading.me/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2021-07-22T14:27:28.415Z","updated":"2020-04-26T12:08:01.857Z","comments":false,"path":"categories/index.html","permalink":"http://lazyloading.me/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-12-22T13:15:47.890Z","updated":"2021-12-22T13:15:47.885Z","comments":true,"path":"tags/index.html","permalink":"http://lazyloading.me/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-07-22T14:27:28.404Z","updated":"2020-04-26T12:08:01.857Z","comments":false,"path":"repository/index.html","permalink":"http://lazyloading.me/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"《人类简史：从动物到上帝》随性笔记","slug":"humanhistory","date":"2022-03-24T09:22:48.000Z","updated":"2022-03-24T09:25:16.991Z","comments":true,"path":"humanhistory/","link":"","permalink":"http://lazyloading.me/humanhistory/","excerpt":"","text":"《人类简史：从动物到上帝》笔记 这本书是年前看视频还是刷微博什么的看到别人推荐的，忘了，记录下看书过程中记下的笔记（和吐槽），持续随性阅读更新 第一部分 认知革命 第二章 知善恶树 通过文字创造出想象的现实，就能让大批互不相识的人有效合作，而且效果还不只如此。正由于大规模的人类合作是以虚构的故事作为基础，只要改变所讲的故事，就能改变人类合作的方式。 脑海中突然冒出个想法，传销吗这不是haha~ 第三章 亚当和夏娃的一天 在现代的富裕社会，平均每周的工时是40~45小时，发展中国家则是60甚至80小时；但如果是狩猎采集者，就算住在最贫瘠的地区（像是卡拉哈里沙漠），平均每周也只需要工作35~45小时。他们大概只需要每三天打猎一次，每天采集3~6小时 现代人社畜无疑了~ 也因为采集者不依赖单一种类的食物，就算某种食物来源断绝了，影响也不会太大。但如果是农业社会，一旦来场干旱、火灾、地震，把当年的稻子或马铃薯摧毁殆尽，就会引发严重的饥荒。虽然采集社会还是难以幸免于自然灾害，而且也会碰上食物短缺或饥荒的情形，但通常他们处理起来就是比较游刃有余 这点我不能同意，人类进入农业社会就是为了解决食物短缺开源不稳定的问题，这也是自然选择导致的生存方式变化，人类发现农业之前的采集社会食物开源虽然多样但是不稳定，吃了上顿没下顿，抵抗自然灾害的能力更差，看看现在的各种野生动物，难道在食物上都比人类富足？或者去看几百年前北方的游牧民族，不断进入中原农业社会掠夺，如果这种生存方式更优越，为什么他们会如此做？ 第二部分 农业革命 第五章 史上最大骗局 第一，小麦不喜欢大小石头，所以智人得把田地里的石头捡干净搬出去，搞得腰酸背痛。第二，小麦不喜欢与其他植物分享空间、水和养分，所以我们看到男男女女在烈日下整天除草。第三，小麦会得病，所以智人得帮忙驱虫防病。第四，不论是蝗虫还是兔子，都不排斥饱尝一顿小麦大餐，但小麦完全无力抵抗，所以农民又不得不守卫保护。最后，小麦会渴，所以人类得从涌泉或溪流大老远把水引来，为它止渴；小麦也会饿，所以智人甚至得收集动物粪便，用来滋养小麦生长的土地。 作者一直在阐述采集社会优于农业社会，或者说单就食物这方面说，优于农业社会，包括在多样性和稳定住方面，我不能苟同，早先多样性是因为没得吃，什么能吃吃什么，总的来说就是吃点东西别让自己饿死，并且农业社会后并不是就不具备多样性了，而是变得以某几种为主，并没有说拒绝吃其他食物，并且，从采集到农业有两个很大的优点是促使人类彻底转变的原因，一个是安全，一个是稳定，采集狩猎社会获取食物，你需要和野兽斗智斗勇，试试小心别让自己受伤，以那个时候的医疗条件，受伤严重点基本等于已经死了，人们都是趋利避害的，而农业种植的安全性要远大于采集狩猎，另一个稳定，前文作者也说了，人类是种族灭绝的元凶，原始社会的人类并没有可持续发展的观念，遇到什么能吃什么就打来吃，他们不知道竭泽而渔的道理（并不绝对），那么可采集狩猎的食物在较长的时间跨度里，是在慢慢减少的，这也是他们不断迁徙的原因之一，看看现在的许多动物仍是如此，而这种情况下的农业种植，恰恰提供了持续的产出，或许他们不懂得可持续发展的道理但是一季又一季的种植，不断的收获，这是看的到的产出；作者虽然说会容易收到自然灾害病虫害的影响，首先自然灾害都是区域性大面积的，如果真有自然灾害，难道只影响你的耕地？不影响你原始的食物采集区？显然不是的，天地不仁以万物为刍狗，大自然和你非亲非故不会特殊照顾你，至于什么平整土地刨除石头之类得，这些工作的难度依然小于采集狩猎，并且是一次性的，一片土地的石头刨除后，明年有不会再长出来对不对？而植物养料的获取难度在人类定居在耕地附近后其实容易获取，难道采集社会的职务就不需要粪便养料？那时候难道不是更难获取？归根结底农业种植活动其实就是固定一片区域的采集狩猎活动，采集的是你种植的植物，狩猎的是你圈养的动物，只不过变得更加稳定和安全了。","categories":[],"tags":[]},{"title":"SDWebImage链接重定向问题处理","slug":"sdwebimageredirect","date":"2022-03-14T12:01:58.000Z","updated":"2022-03-14T12:28:54.377Z","comments":true,"path":"sdwebimageredirect/","link":"","permalink":"http://lazyloading.me/sdwebimageredirect/","excerpt":"","text":"Round 1 最近公司的文件服务器进行了改造，即使是图片的加载请求也要携带token，否则无法加载，而我们项目中图片加载用的是SDWebImage,当时听到这个需求我内心毫无波动，心里已经…你懂得，不过该做还是要做，三下五除二写完了代码如下： 1[[SDWebImageDownloader sharedDownloader] setValue:@&quot;你的token&quot; forHTTPHeaderField:@&quot;Authorization&quot;]; SDWebImage的下载处理是由SDWebImageDownloader单例类实现，所以在你项目中合适的地方加上这句代码，项目中所有用SDWebImage做图片加载的地方就都会携带上token了 Round 2 这样修改完后确实本来不能加载的地方变得正常了，直到那一天，那是一个春天… 项目中要添加一个需求，需要引用公司的一个私有Pod功能库，又是一顿操作，集成完毕，逻辑编写完成，run，诶，图片居然没加载出来，我草这什么情况，我再次确认了一下，我的token设置完成了的 我去询问编写这个Pod的同事，是不是我哪里没配置完成，他略微沉思一下两秒钟后说，你添加完token还要在SDWebImageDownloader修改下源码，我：？？？，随后他找到了这个源码，代码如下： 123456789101112- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task willPerformHTTPRedirection:(NSHTTPURLResponse *)response newRequest:(NSURLRequest *)request completionHandler:(void (^)(NSURLRequest * _Nullable))completionHandler &#123; // Identify the operation that runs this task and pass it the delegate method NSOperation&lt;SDWebImageDownloaderOperation&gt; *dataOperation = [self operationWithTask:task]; if ([dataOperation respondsToSelector:@selector(URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:)]) &#123; [dataOperation URLSession:session task:task willPerformHTTPRedirection:response newRequest:request completionHandler:completionHandler]; &#125; else &#123; if (completionHandler) &#123; completionHandler(request); &#125; &#125;&#125; 他解释说道，这个功能模块里的一些图片链接中携带了一些参数，并不是直接指向资源，所以请求会进行重定向，所以需要在这里进行处理，处理后的代码如下： 1234567891011121314- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task willPerformHTTPRedirection:(NSHTTPURLResponse *)response newRequest:(NSURLRequest *)request completionHandler:(void (^)(NSURLRequest * _Nullable))completionHandler &#123; // Identify the operation that runs this task and pass it the delegate method NSOperation&lt;SDWebImageDownloaderOperation&gt; *dataOperation = [self operationWithTask:task]; NSMutableURLRequest *customRequest = [[NSMutableURLRequest alloc] initWithURL:request.URL]; customRequest.allHTTPHeaderFields = self.HTTPHeaders; if ([dataOperation respondsToSelector:@selector(URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:)]) &#123; [dataOperation URLSession:session task:task willPerformHTTPRedirection:response newRequest:customRequest completionHandler:completionHandler]; &#125; else &#123; if (completionHandler) &#123; completionHandler(customRequest); &#125; &#125;&#125; 我将代码修改后，run，确实，问题解决了，但是不对啊，我们的SDWebImage是通过Pod的方式集成的，这样直接在Pod文件夹下修改三方的源码，那么下次更新后，岂不是被覆盖了？这是一个新的问题，于是我开始思考怎么解决重定向问题的同事不修改三方库的源码，脑海中瞬间就想到了AOP iOS开发中优秀的AOP库那必须有Aspects名字，接下来我开始思考具体步骤 首先，通过同事提供的解决问题的代码来看，他是把参数request给改为了一个自定义的customRequest，这两个的区别，然后重新设置了allHTTPHeaderFields 12NSMutableURLRequest *customRequest = [[NSMutableURLRequest alloc] initWithURL:request.URL];customRequest.allHTTPHeaderFields = self.HTTPHeaders; 那么我想，问题主要就是在allHTTPHeaderFields这里了，我打印了request和customRequest的allHTTPHeaderFields后发现，前者比后者少了token,怪不得无法加载，这里要提一下下边这个方法 1- (void)URLSession:(NSURLSession *)session task:(NSURLSessionTask *)task willPerformHTTPRedirection:(NSHTTPURLResponse *)response newRequest:(NSURLRequest *)request completionHandler:(void (^)(NSURLRequest * _Nullable))completionHandler 这其实不是SDWebImageDownloader的方法，是NSURLSessionTaskDelegate的里的协议方法，SDWebImageDownloader实现协议方法后在里边做了自己的重定向处理 那么说一下我一开始的想法，既然问题出在重定向时request里未携带我们手动添加的token，并且重定向这里肯定是要做处理的，那我们直接把相关参数设置给request，没必要创建一个新的customRequest实例 1[request setValue:self.HTTPHeaders forKey:@&quot;allHTTPHeaderFields&quot;]; 因为request是一个NSURLRequest对象，它的allHTTPHeaderFields是一个readonly属性，我们不能直接修改，所以我想当然的用KVC去操作， 然后 run ，然后 我草crash了，报错信息如下 1&quot;[&lt;NSURLRequest 0x2800efa50&gt; setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key allHTTPHeaderFields.&quot; 看描述信息是说NSURLRequest没有对应的allHTTPHeaderFields这个key，有那么一瞬间我愣了下，这不科学啊怎么可能没有，我点进NSURLRequest类确认了下，有啊，什么情况，但是本着求知的态度，我心想是不是NSURLRequest内部使用的是不是不叫allHTTPHeaderFields,但是不对啊，这个属性明明在的啊，即使是别的也应该是内部重新赋值我这里不应该报错啊，不过我还是用通过runtime将他的属性列表打印了一下，再次确认了，他确实有allHTTPHeaderFields这个属性，于是我搜索了下相关问题，发现了一个关键词 1+ (BOOL)accessInstanceVariablesDirectly 详细信息自行检索，我这里说下结果，这个是针对KVC的，总的来说，当一个类实现了这个方法并且返回了YES他就可以通过KVC(这个说法不完全准确，因为本文不是针对KVC的故简要说明)赋值，如果返回NO就不可以用KVC赋值 看到这里后我猜测NSURLRequest里这个方法应该是返回了NO,那完了，走不通了，还是要实例化一个新的对象 Round 3 搞了半天想省事看来不行啊，那拉倒，直接开始AOP修改： 1234567891011121314NSError * error ;[[SDWebImageDownloader sharedDownloader] aspect_hookSelector:@selector(URLSession: task: willPerformHTTPRedirection: newRequest: completionHandler:) withOptions:AspectPositionInstead usingBlock:^(id&lt;AspectInfo&gt; aspectInfo, NSString *num)&#123; NSArray * param = aspectInfo.arguments; NSURLRequest * request = param[3]; NSURLSessionTask * task = param[1]; NSMutableURLRequest *customRequest = [[NSMutableURLRequest alloc] initWithURL:request.URL]; customRequest.allHTTPHeaderFields = task.currentRequest.allHTTPHeaderFields; request = customRequest; NSInvocation * invocation = aspectInfo.originalInvocation; [invocation setArgument:&amp;request atIndex:5]; [invocation invoke]; &#125; error:&amp;error]; 这里边aspectInfo就是被hook方法的信息，可以通过它取到原方法的参数，调用对象等等，我们这里要添加我们的token，因此取出参数进行修改 arguments是原方法的入参列表，是一个数组 invocation是一个消息对象，包含了一个方法的所有信息 通过URLSession: task: willPerformHTTPRedirection: newRequest: completionHandler:方法我们可以知道request的索引是3，task的索引是1（取出它是因为我们要获取原header信息，这个不能丢弃），之后对request重新进行赋值，完成修改，然后重新调用方法 12[invocation setArgument:&amp;request atIndex:5];[invocation invoke]; 因为我们只需要修改request一个对象，因此只重新设置这一个方法入参，至于这里为什么在赋值的时候索引是5,因为前两个分别被该方法的self与_cmd占用，所以我们设置参数的时候索引是从2开始 再次run，嗯，图片顺利加载，问题解决。 这样一来，我们就不需要修改三方的源码就解决了问题，否则修改源码的话每次更新Pod我们的修改就会被覆盖掉，如果哪次发版没注意，测试也没回归覆盖，很容易将问题带到线上","categories":[],"tags":[]},{"title":"快进来找个地方坐下，一个移动端老菜鸟的2021年度总结","slug":"yearsummary","date":"2021-12-19T08:12:09.000Z","updated":"2021-12-19T08:13:15.305Z","comments":true,"path":"yearsummary/","link":"","permalink":"http://lazyloading.me/yearsummary/","excerpt":"","text":"前言： 想一想，参加工作已经五年了，还从没有给自己写过年度总结（只写过公司要求的那种），最近在群里看到各位群友都在写年度总结，看了几篇后感觉挺有意思，字里行间的喜怒哀乐，让我感觉非常亲切，这就是生活的味道啊，所以，不自觉地就开始回想起自己这一年的经历，遂动手写下了了这篇自己人生中第一篇年度总结。 回首2021 工作 进入目前公司是在去年国庆节前后，当时项目紧，并且公司对那个项目也非常重视，所以我们几个移动端一一起参与进去加了一段时间的班，到去年底今年初的时候，公司启动了一个新项目，可能是因为我之前做过物流相关的项目，而这个也是物流相关，所以领导决定让我去做，其实项目挺简单，所以从我接下来到现在，一年时间平平淡淡，项目稳步迭代，也没有什么大的技术难点，这让我中间有了一段时间的空闲期，中间抽身到别的项目去做过一段辅助性工作，再然后还是没需求进来，工作不饱和，我就开始思考起干脆去看点新东西吧。 学习 Flutter 其实flutter这个跨平台框架发布已经有几年时间了，不过由于我没有认真去了解过，所以对于我来说是一个新的东西，以前看过几天，没有实际应用边学边忘，为了避免再次出现这样的情况于是我把公司的项目给仿写了下， 当时找了好多在线教程教程和书籍包括《Flutter实战》以及在京东读书看的《Flutter入门与实战》 一开始确实不太习惯，从命令式布局的UIKit到声明式布局的Flutter，当时在写的时候脑海中不自觉地问了很多次为什么，这里为什么要这么写，那里为什么要这么设计，因为当时我的思维逻辑还是iOS里UIKit的布局方式那一套，特别是写列表的时候，查了很多次Flutter的列表复用的问题，再比如…这嵌套也太tm恶心了吧🤮，为什么非要一层一层嵌套，我就写个层叠布局为什么非要套一层…之类的问题很多，但是写的久了之后，写的顺手了后，我只想说一句 大概断断续续看了一个月左右，把现在项目大体给仿写了一遍，就此，搬砖技能+1 在flutter看的基本能写项目后，本想在项目中应用下来写业务，但是调研了以native为基础的混合开发后发现，坑挺多的，业务闭环问题，路由问题，内存问题，包大小等等，和领导沟通后还是还是求稳为主，没有在项目中使用，但是那个仿写项目我还在继续。 Vue 大概在三四个月前，项目组有个需求比较重要且紧急，当时的前端同事在做了排期后提出时间可能有点紧，而我当时手头刚好没需求在开发，领导就找到我说要不也参与进来做一些辅助性工作（其实我们公司前端人数挺多的，但是分散在各个项目组，而我们项目组刚好这时资源不太够），听完后我心里一想，可以啊，反正我之前也看过jQuery，有一点点基础，而我自己也有兴趣，于是便参与了进去 公司前端项目用的是vue2.0，又是一波，文档，资料，看了后感觉，vue入门确实简单，很多东西都是现成的，直接用就好了，UI组件vant类似的库也是开箱即用，不像iOS，除了基本的组件什么都要自己搞，路由要自己搞，数据管理还复杂，就这么搞了大概两周，项目顺利上线，就此，搬砖技能+0.5（因为flutter起码我已经可以完整的写简单的项目了，而前端我只参与了其中的一个模块，不懂的东西茫茫多） vue的学习必须要感谢一位不愿意透漏姓名的老哥，感谢老哥的无私帮助，感谢命运让我们相遇，感谢党和政府给予我们的幸福生活😂😂😂 英语 啊，说起英语，学生时代就让我头痛，没想到毕业后还是要整天接触（真的是没想到，因为我非科班出身，毕业后在对口行业工作了半年后才参加培训转行开发）不过仅仅是开发的话其实对英语要求不高，想要进阶要求才高，毕竟很多文档，资料都是英文的. 我大概是在前一段时间，在YouTube看视频，看到下边评论，大多数都是英文评论，而我又想知道他们到底说的什么（我知道YouTube自带翻译），我开始尝试着去理解评论，发现只能看个大概，很多单词不认识，所以又萌生了去学英语的想法，我为什么要说又呢？因为之前几乎每年都有这样的想法，但是都没有实际行动，于是我上某乎搜索，学英语app，然后把推荐的七八款app全都下载，一个一个打开看哪个更好用（好看），最终选择了其中的四款，但其实是两家公司的产品，这里我不得不吐槽下，为什么现在都喜欢把一个需求的子需求单独做app，然后开不同的会员，对不同的会员，比如听力，一个app，单词，又一个app，文章阅读再搞一个app，然后每个app都有单独的会员，我屮艸芔茻，产品经理鬼才啊是吧，逮着羊毛使劲薅是吧… 但是吐槽归吐槽，该学还是要学，从基本的卖火柴的小女孩，阿拉丁神灯这些文章开始看起，每天再背点单词，到现在持续了差不多十天了，也不知道还能坚持几天，会不会像以前一样最后不了了之，总之先就这样吧，起码我目前没有放弃的想法… 其他无关的书籍 中间想填充下空虚的精神还看了几本杂书，因为以前很喜欢看雍正王朝电视剧，所以去看完了原著小说，雍正皇帝三部曲《九王夺嫡》《雕弓天狼》《恨水东逝》不得不说，电视拍的好，小说写得也棒； 另外今年微博爆出的几篇小作文，把男女性别矛盾推向了新的高峰，我一直觉得性别之上还有人性，我们应该骂的是恶人，而不是性别不同的人，恶人自有法律制裁，而你，只需要做好自己，所以我想知道微博女拳到底在想什么，所以我去看了《女性主义有什么用》希望能了解一二，不过暂时还没看完； 而我本人一直很喜欢看历史和自然相关的内容，以前在家整天看中央十套的《探索发现》《科技之光》《动物世界》之类的节目，书籍以前也看过一些，有一天突然在网上看到有人推荐《人类简史：从动物到上帝》，于是便找出来看了下，确实不错，虽然不讲具体的历史事件，但是会从历史进程去思考，更像是一本哲学书籍，目前也没看完，看了一部分，后续会接着继续看； 生活 今年，和谈了几年的女朋友也到了谈婚论嫁的地步，女朋友也来到了我工作的城市，围绕着订婚，三金，彩礼，车子等问题我们进行了坦率的沟通，充分交换了意见，进一步增进了双方的了解，顺利的订了婚。 这期间，我们也闹过矛盾，大多是因为一些很小的，很细微的问题，甚至是一个眼神，一个手势，这让我倍感无奈，有时候对于一件事，明明有性价比更高，更合理简单的处理方式，但是却不去选择更优解，这让我难以理解，而我，只能在一声叹气后走过去，抱住，安慰两句，静静的等情绪的平复，有时候会更严重些，一直闹到半夜，虽然最后我们都会和好如初，但是我还是想说一句，人生啊… 展望2022 虽然是一个这么2的年份，我也有些许期待和计划… 据传003要下水，期待满满，不知道有没有机会近距离去看看 继续我的英语学习计划 继续学习跨端以及前端技术 使用flutter开发一个商业级项目 看完五本书（太多怕打脸） 开始定期写文，以前也写但是随缘，可能半年一年才写一篇 体重重回62公斤 挣更多的小钱钱（这是最主要的） 中个500万吧不用太多😂 结语 最后，祝愿世界和平，祖国繁荣昌盛，疫情早日结束，各位事业进步，生活美满，风会指引你们前进的方向，大地母亲与你同在,Lok’Tar Ogar!!!🙏🙏🙏","categories":[],"tags":[{"name":"年终总结","slug":"年终总结","permalink":"http://lazyloading.me/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"}]},{"title":"iOS模拟器推送测试及踩坑","slug":"iospushsimulator","date":"2021-12-19T07:43:04.000Z","updated":"2021-12-22T13:07:56.284Z","comments":true,"path":"iospushsimulator/","link":"","permalink":"http://lazyloading.me/iospushsimulator/","excerpt":"","text":"前言： 现在的App几乎都有推送功能，开发推送功能的时候我们肯定要进行测试，但是之前推送功能只有在真机上才能测试，在Xcode11.4之后，模拟器也支持推送测试，具体操作如下： 1.创建推送文件 内容类似如下格式 12345678910&#123; &quot;aps&quot;:&#123; &quot;alert&quot;:&#123; &quot;title&quot;:&quot;标题&quot;, &quot;body&quot;:&quot;内容辱与共产主义不容辞&quot; &#125;, &quot;content-available&quot; : 1, &quot;mutable-content&quot; : 1 &#125;&#125; 具体格式根据你们的产品要求，接入极光或者个推的可以在控制台发一条推送打印出具体格式内容查看,将文件保存后缀为apns，待会要用到 2.执行如下命令进行测试 查看已启动模拟器 1xcrun simctl list devices | grep Booted 会看到类似下面信息，如果没有请先启动模拟器 1iPhone 12 Pro (1BEE4182-C934-431E-BCBF-F7676C4C2BFC) (Booted) 运行项目在模拟器上后执行相应命令simctl push &lt;device&gt; [&lt;bundle identifier&gt;] (&lt;json file&gt; | -) 示例如下 1xcrun simctl push Booted com.app.test /Users/lazyloading/Desktop/payload.apns 3.另外还有一种方式是直接使用推送文件 将第一步创建的json文件内容稍加修改,具体就是添加了 &quot;Simulator Target Bundle&quot;: &quot;com.app.test&quot;你项目的包名 1234567891011&#123; &quot;Simulator Target Bundle&quot;: &quot;com.app.test&quot;, &quot;aps&quot;:&#123; &quot;alert&quot;:&#123; &quot;title&quot;:&quot;标题&quot;, &quot;body&quot;:&quot;内容辱与共产主义不容辞&quot; &#125;, &quot;content-available&quot; : 1, &quot;mutable-content&quot; : 1 &#125;&#125; 然后直接拖动文件到模拟器上，出现绿色➕后松手，这样也可以进行推送测试 踩坑 到这里按照网上你查看的其他教程应该已经收到测试的推送了，但是我没有&gt;_&lt;! 原因很简单，没有注册，我的项目中集成的是极光推送，已经存在注册步骤，但是这里依然要我注册，如果你遇到类似的问题，添加如下代码 123[UNUserNotificationCenter.currentNotificationCenter requestAuthorizationWithOptions:UNAuthorizationOptionAlert | UNAuthorizationOptionSound completionHandler:^(BOOL granted, NSError * _Nullable error) &#123; NSLog(@&quot;%d&quot;,granted);&#125;]; 这是应该就可以正常收到推送了，但是依然存在几个问题，推送相关的代理方法没有执行，iOS15真机可以，模拟器不行，例如 1- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler 另外就是前台没法收到推送，退到后台才可以，至少我这里遇到的情况是这样，虽然模拟器支持推送测试，但是依然无法和真机进行比较，最好还是以真机测试为准","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://lazyloading.me/tags/iOS/"}]},{"title":"Homebrew 安装Mysql密码忘记解决","slug":"mysqlerror","date":"2021-12-19T07:40:17.000Z","updated":"2021-12-19T08:13:41.542Z","comments":true,"path":"mysqlerror/","link":"","permalink":"http://lazyloading.me/mysqlerror/","excerpt":"","text":"我的Mac很久之前安装了mysql，当时设置了密码，最近重新想起来用，但是忘记了密码，网上找了很多文章，千篇一律几乎都是复制粘贴，个别过分的就贴一个链接完事，找了很久终于找到了解决方案，所以做个记录，免得遇到同样问题的人跟我一样找半天解决方案 5.8及之前，网上文章几乎都是针对此种情况 第一步 因为忘记密码无法启动，所以执行下面命令进入安全启动模式 1mysql.server start --skip-grant-tables 第二步 登录 1mysql -uroot 第三步 此时进入mysql下 1use mysql 第四步 接着执行 1FLUSH PRIVILEGES; 第五步 设置密码 1SET PASSWORD FOR &#x27;root&#x27;@&#x27;localhost&#x27; = PASSWORD(&#x27;你的新密码&#x27;); 退出mysql，杀掉进程，重新启动 5.8之后，我的是8.0.25 前四步操作同上 1ALTER user &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;你的新密码&#x27;; 退出mysql，杀掉进程，重新启动即可正常登陆 文档","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://lazyloading.me/tags/Mysql/"}]},{"title":"iOS15推送后台语音播报探索","slug":"iosnotice","date":"2021-12-19T06:38:57.000Z","updated":"2021-12-19T08:13:46.538Z","comments":true,"path":"iosnotice/","link":"","permalink":"http://lazyloading.me/iosnotice/","excerpt":"","text":"meta 前言 前一段时间公司项目有个推送内容语音播报的需求，当时让做技术调研，简单搜了下相关的文章和资料，调研一半的时候突然来了优先级更高的需求，搁置了，这两天空下来，所以继续看，并且有了可行的方案。 调研后发现这个需求用到Notification Service Extension，网上有一些文章讲这个需求的实现，但是绝大多数讲的方案现在已经不适用了或者是只提供一个大致的思路没有具体的实现，所以把我实现这个需求的过程记录分享出来 Notification Service Extension Notification Service ExtensioniOS10之后才能使用，如果要想使用Notification Service Extension对通知内容进行更改，需要在推送中增加mutable-content字段并将值设置为true，使用通知扩展后推送的处理流程如图所示 创建步骤如下图所示 完成后会在项目中生成一个target和对应的文件夹，我们的代码就要卸载NotificationService.m中 NotificationService.m文件内部有两个方法，我们可以在这个方法中对通知内容进行修改 123// Call contentHandler with the modified notification content to deliver. If the handler is not called before the service&#x27;s time expires then the unmodified notification will be delivered.// You are expected to override this method to implement push notification modification.- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent *contentToDeliver))contentHandler 在这个方法中做通知扩展终止前的兜底处理 12// Will be called just before this extension is terminated by the system. You may choose whether to override this method.- (void)serviceExtensionTimeWillExpire; 到此Notification Service Extension创建完成 播报探索 系统语音合成 系统提供的有文字转语音播报的方法，我们在收到推送后可以传入文字直接播报出语音 1234567891011121314- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler &#123; self.contentHandler = contentHandler; self.bestAttemptContent = [request.content mutableCopy]; // Modify the notification content here... self.bestAttemptContent.title = [NSString stringWithFormat:@&quot;%@ [modified]&quot;, self.bestAttemptContent.title]; NSString *content = self.bestAttemptContent.userInfo[@&quot;aps&quot;][@&quot;alert&quot;][@&quot;body&quot;]; AVSpeechUtterance *utterance = [AVSpeechUtterance speechUtteranceWithString:content]; AVSpeechSynthesisVoice *voice = [AVSpeechSynthesisVoice voiceWithLanguage:@&quot;zh-CN&quot;]; utterance.voice = voice; AVSpeechSynthesizer *synth = [[AVSpeechSynthesizer alloc] init]; [synth speakUtterance:utterance]; self.contentHandler(self.bestAttemptContent);&#125; 网上大部分文章也会这么写，但是现在实际应用中基本不会用这个方案原因有两个： iOS12.1之后系统限制了在扩展里进行播报的能力，所以此方案只能用在iOS12.1之前 语音生硬，并且多音字和英文字母在汉语语境下经常读错，比如字母E会读成额的音(这个我同一套代码在不同设备上读音不一致，没找到原因)，还是三方服务效果好点&gt;_&lt;! 内置本地音频 后来就想，不能语音合成，那播放本地语音呢？ 1234567891011- (void)didReceiveNotificationRequest:(UNNotificationRequest *)request withContentHandler:(void (^)(UNNotificationContent * _Nonnull))contentHandler &#123; self.contentHandler = contentHandler; self.bestAttemptContent = [request.content mutableCopy]; // Modify the notification content here... self.bestAttemptContent.title = [NSString stringWithFormat:@&quot;%@ [modified]&quot;, self.bestAttemptContent.title]; NSString * voiceType = self.bestAttemptContent.userInfo[@&quot;voiceType&quot;]; UNNotificationSound * sound = [UNNotificationSound soundNamed:[NSString stringWithFormat:@&quot;%@.mp3&quot;,voiceType]]; self.bestAttemptContent.sound = sound; self.contentHandler(self.bestAttemptContent);&#125; 扩展类中有个bestAttemptContent属性，他是UNMutableNotificationContent类型，我们在修改推送内容时也是对它进行修改，而播放本地语音就是修改它的sound属性，但是这个时候产品跳出来了，说对这样的实现不太满意，太死板，只能播放固定的音频不够灵活😂，没办法只能继续看 然后就想把播报内容拆开，本地内置几段语音，根据推送内容进行拼接，然后修改sound进行播报，我先随便找了两段比较短的音频内置进项目进行测试 12345678910111213141516171819202122232425262728293031323334353637383940414243444546-(void)audioMergeClick&#123; //1.获取本地音频素材 NSString *audioPath1 = [[NSBundle mainBundle]pathForResource:@&quot;1&quot; ofType:@&quot;mp3&quot;]; NSString *audioPath2 = [[NSBundle mainBundle]pathForResource:@&quot;2&quot; ofType:@&quot;mp3&quot;]; AVURLAsset *audioAsset1 = [AVURLAsset assetWithURL:[NSURL fileURLWithPath:audioPath1]]; AVURLAsset *audioAsset2 = [AVURLAsset assetWithURL:[NSURL fileURLWithPath:audioPath2]]; //2.创建两个音频轨道,并获取两个音频素材的轨道 AVMutableComposition *composition = [AVMutableComposition composition]; //音频轨道 AVMutableCompositionTrack *audioTrack1 = [composition addMutableTrackWithMediaType:AVMediaTypeAudio preferredTrackID:0]; AVMutableCompositionTrack *audioTrack2 = [composition addMutableTrackWithMediaType:AVMediaTypeAudio preferredTrackID:0]; //获取音频素材轨道 AVAssetTrack *audioAssetTrack1 = [[audioAsset1 tracksWithMediaType:AVMediaTypeAudio] firstObject]; AVAssetTrack *audioAssetTrack2 = [[audioAsset2 tracksWithMediaType:AVMediaTypeAudio]firstObject]; //3.将两段音频插入音轨文件,进行合并 //音频合并- 插入音轨文件 // `startTime`参数要设置为第一段音频的时长，即`audioAsset1.duration`, 表示将第二段音频插入到第一段音频的尾部。 [audioTrack1 insertTimeRange:CMTimeRangeMake(kCMTimeZero, audioAsset1.duration) ofTrack:audioAssetTrack1 atTime:kCMTimeZero error:nil]; [audioTrack2 insertTimeRange:CMTimeRangeMake(kCMTimeZero, audioAsset2.duration) ofTrack:audioAssetTrack2 atTime:audioAsset1.duration error:nil]; //4. 导出合并后的音频文件 //`presetName`要和之后的`session.outputFileType`相对应 //音频文件目前只找到支持m4a 类型的 AVAssetExportSession *session = [[AVAssetExportSession alloc]initWithAsset:composition presetName:AVAssetExportPresetAppleM4A]; NSString *outPutFilePath = [[self.filePath stringByDeletingLastPathComponent] stringByAppendingPathComponent:@&quot;test.m4a&quot;]; if ([[NSFileManager defaultManager] fileExistsAtPath:outPutFilePath]) &#123; [[NSFileManager defaultManager] removeItemAtPath:outPutFilePath error:nil]; &#125; // 查看当前session支持的fileType类型 NSLog(@&quot;---%@&quot;,[session supportedFileTypes]); session.outputURL = [NSURL fileURLWithPath:self.filePath]; session.outputFileType = AVFileTypeAppleM4A; //与上述的`present`相对应 session.shouldOptimizeForNetworkUse = YES; //优化网络 [session exportAsynchronouslyWithCompletionHandler:^&#123; if (session.status == AVAssetExportSessionStatusCompleted) &#123; NSLog(@&quot;合并成功----%@&quot;, outPutFilePath); UNNotificationSound * sound = [UNNotificationSound soundNamed:@&quot;test.m4a&quot;]; self.bestAttemptContent.sound = sound; self.contentHandler(self.bestAttemptContent); &#125; else &#123; self.contentHandler(self.bestAttemptContent); &#125; &#125;];&#125; 然后，推送过来后播报的还是默认声音😳，于是开始找原因，一开始以为是文件格式的问题，于是把m4a转化成mp3(省略代码)，还是不行，最后找到了一片文章（感谢大佬），文章说sound读取本地音频不是所有路径都可以，是有优先级的 主应用中的文件夹 AppGroups共享目录中的Library/Sounds文件夹 main bundle 根据这个说法我开始测试，首先是第一条，我打印出APP沙盒Library下所有目录 Library/Sounds 看到里边的Sounds目录了吧，这是我创建的，之前并没有，然后修改合成文件的保存路径，重新走起！ 额，依然播报的是系统默认声音，短时间内没找到原因，于是直接看第二优先级 AppGroups 我们知道因为沙盒机制，iOS系统的App只能访问自己的文件夹，AppGroups就是苹果提供的同一开发者账号下多App资源共享的一种方案，最低支持iOS8，我们用的是企业签名，因为公司组织架构和权限的原因麻烦了一天才把一个简单AppGroups配置完成😭，这里就不贴具体的创建和配置过程了，网上相关的资料也很多了 最终将上边的音频文件导出路径修改为AppGroups下的Library/Sounds 12345678910[session exportAsynchronouslyWithCompletionHandler:^&#123; if (session.status == AVAssetExportSessionStatusCompleted) &#123; NSLog(@&quot;合并成功----%@&quot;, outPutFilePath); UNNotificationSound * sound = [UNNotificationSound soundNamed:@&quot;test.m4a&quot;]; self.bestAttemptContent.sound = sound; self.contentHandler(self.bestAttemptContent); &#125; else &#123; self.contentHandler(self.bestAttemptContent); &#125;&#125;]; 记得判断文件夹是否存在，我这里简单贴一下AppGroups的操作吧 12345NSURL *groupURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:kGroupDefaultSuiteName]; NSURL * sounds = [groupURL URLByAppendingPathComponent:@&quot;/Library/Sounds/&quot; isDirectory:YES]; if (![[NSFileManager defaultManager] contentsOfDirectoryAtPath:sounds.path error:nil]) &#123; [[NSFileManager defaultManager] createDirectoryAtPath:sounds.path withIntermediateDirectories:YES attributes:nil error:nil]; &#125; 最终，发起推送，播报成功，但这个方案产品虽然说可以但还是不太满意，于是，继续摸索 最终方案 那么总结下之前方案不行的原因： 直接语音转文字播报，系统限制iOS12.1后播报能力 固定音频，不够灵活产品不满意 拆分固定音频，拼接后播报（同上） 既然这样，能不能把上边几种方案的优点结合下？将文字转语音后的音频文件存到本地然后再去播报？这里得到了另一个大佬的指点（感谢大佬），尝试过后确认方案可行☺️ 查看了AVSpeechSynthesizer文档后没找到转音频文件的相关方法（可能是我眼拙，找到的请告诉我）于是去看了三方的能力，其中百度和科大讯飞的离线合成都提供了获取音频文件的方法，但是最终我用的是科大讯飞的，因为百度的只提供两个设备码供测试，科大讯飞的十个（格局打开） 详细方法看科大讯飞文档，注册申请过程我这里就不赘述了，但是如果想用三方服务强烈建议先看文档！！！ 1. 初始化离线合成引擎 12345//讯飞 [IFlySetting setLogFile:LVL_ALL]; [IFlySetting showLogcat:YES]; NSString *initString = [[NSString alloc] initWithFormat:@&quot;appid=%@&quot;, @&quot;你的appid&quot;]; [IFlySpeechUtility createUtility:initString]; 2. 设置参数 1234567891011121314_iFlySpeechSynthesizer = [IFlySpeechSynthesizer sharedInstance]; _iFlySpeechSynthesizer.delegate = self; [[IFlySpeechUtility getUtility] setParameter:@&quot;tts&quot; forKey:[IFlyResourceUtil ENGINE_START]]; //设置本地引擎类型，普通版设置为TYPE_LOCAL，高品质版设置为TYPE_LOCAL_XTTS [_iFlySpeechSynthesizer setParameter:[IFlySpeechConstant TYPE_LOCAL] forKey:[IFlySpeechConstant ENGINE_TYPE]]; //设置发音人为小燕 [_iFlySpeechSynthesizer setParameter:@&quot;xiaoyan&quot; forKey:[IFlySpeechConstant VOICE_NAME]]; //获取离线语音合成发音人资源文件路径。以发音人小燕为例，请确保资源文件的存在。 NSString *resPath = [[NSBundle mainBundle] pathForResource:@&quot;common&quot; ofType:@&quot;jet&quot;]; NSString *resPath1 = [[NSBundle mainBundle] pathForResource:@&quot;xiaoyan&quot; ofType:@&quot;jet&quot;]; NSString *vcnResPath = [[NSString alloc] initWithFormat:@&quot;%@;%@&quot;,resPath,resPath1]; //设置离线语音合成发音人资源文件路径 [_iFlySpeechSynthesizer setParameter:vcnResPath forKey:@&quot;tts_res_path&quot;]; [_iFlySpeechSynthesizer synthesize:content toUri:[self pcmPath]]; 其中-(void)synthesize:(NSString *)text toUri:(NSString*)uri方法就是离线合成后讲语音文件保存本地的方法，两个参数，第一个是要播报的文字内容，第二个是音频文件要存储的路径 3. 获取本地音频 这边有个问题就是离线合成的语音文件是pcm格式的，不仅是讯飞，百度也是一样，pcm我们是不能直接给sound播放的，所以我们要做一个格式转换，转成mp3进行播放，贴一个pcm转mp3方法，需要用的lame三方库 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152/*** * pcm 文件转mp3文件 */- (BOOL)convertPcm:(NSString *)pcmPath toMp3:(NSString *)mp3Path &#123; @try &#123; FILE *fpcm = fopen([pcmPath cStringUsingEncoding:NSASCIIStringEncoding], &quot;rb&quot;); if (fpcm == NULL) &#123; return false; &#125;// fseek(fpcm, 1024*4, SEEK_CUR); //跳过源文件的信息头，不然在开头会有爆破音 FILE *fmp3 = fopen([mp3Path cStringUsingEncoding:NSASCIIStringEncoding], &quot;wb&quot;); int channelCount = 1; // 声道数, 跟录音时配置一样的 lame_t lame = lame_init(); lame_set_in_samplerate(lame, 16000); //设置采样率, 需要跟录音时的采样率相同 lame_set_num_channels(lame, channelCount); //声道，不设置默认为双声道 lame_set_VBR(lame, vbr_default);// lame_set_mode(lame, 0);//设置最终mp3编码输出的声道模式，如果不设置则和输入声道数一样。参数是枚举，STEREO代表双声道，MONO代表单声道 lame_set_quality(lame, 2);//设置压缩品质，quality=0..9. 0=best (very slow). 9=worst. 品质越好转码速度越慢 lame_init_params(lame); const int PCM_SIZE = 8192;// const int MP3_SIZE = 8192; // short int pcm_buffer[PCM_SIZE*channelCount]; unsigned char mp3_buffer[MP3_SIZE]; int read; int write; do &#123; read = fread(pcm_buffer, channelCount*sizeof(short int), PCM_SIZE, fpcm); if (read == 0) &#123; write = lame_encode_flush(lame, mp3_buffer, MP3_SIZE); &#125; else &#123; if (channelCount == 1) &#123; write = lame_encode_buffer(lame, pcm_buffer, NULL, read, mp3_buffer, MP3_SIZE); // 单声道音频转码 &#125; else &#123; write = lame_encode_buffer_interleaved(lame, pcm_buffer, read, mp3_buffer, MP3_SIZE); // 多声道音频转码 &#125; &#125; fwrite(mp3_buffer, write, 1, fmp3); &#125; while (read != 0); lame_mp3_tags_fid(lame, fmp3); lame_close(lame); fclose(fmp3); fclose(fpcm); &#125; @catch (NSException *exception) &#123; NSLog(@&quot;catch exception, %@&quot;, exception); return false; &#125; @finally &#123; return true; &#125;&#125; 最后在合成完成方法中做转换和播报处理 1234567891011121314151617181920212223242526- (void) onCompleted:(IFlySpeechError *) error &#123; if (error.errorCode == 0) &#123; NSURL *groupURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:kGroupDefaultSuiteName]; NSURL * sounds = [groupURL URLByAppendingPathComponent:@&quot;/Library/Sounds/&quot; isDirectory:YES]; if (![[NSFileManager defaultManager] contentsOfDirectoryAtPath:sounds.path error:nil]) &#123; [[NSFileManager defaultManager] createDirectoryAtPath:sounds.path withIntermediateDirectories:YES attributes:nil error:nil]; &#125; NSURL *mp3Path = [groupURL URLByAppendingPathComponent:@&quot;Library/Sounds/voice.mp3&quot; isDirectory:NO]; BOOL result = [self convertPcm:[self pcmPath] toMp3:mp3Path.path]; if (result) &#123; if (@available(iOS 12.1,*)) &#123; UNNotificationSound * sound = [UNNotificationSound soundNamed:@&quot;voice.mp3&quot;]; self.bestAttemptContent.sound = sound; self.contentHandler(self.bestAttemptContent); &#125;else&#123; _player = [[AVAudioPlayer alloc] initWithContentsOfURL:mp3Path error:nil]; [_player play]; self.contentHandler(self.bestAttemptContent); &#125; &#125;else&#123; self.contentHandler(self.bestAttemptContent); &#125; &#125;else&#123; self.contentHandler(self.bestAttemptContent); &#125;&#125; 这里依然做了系统区分，因为实际测试后发现，iOS11的系统设置合成音频给sound后还是播放的默认声音，后来发现有人遇到类似的问题，iOS10-iOS12系统无法在推送扩展里读取到AppGroups中的音频文件，之前手边只有iOS15系统的测试机，没有发现这个问题，所以最后在依然做了区分处理低版本系统用AVAudioPlayer播放合成音频 实现总结 创建Notification Service Extension以实现对推送消息做最后的修改 添加AppGroup 将要播报的文字内容用离线合成转成音频文件并存入AppGroup内的/Library/Sounds下 修改bestAttemptContent的sound为存入本地的音频文件 虽然实现这个需求废了些时间，但是实现后回头看看，也就几步😂😂😂 注意点 Extension是单独的进程，离线合成引擎要在Extension中启动 Extension启动后只有约30s时间供你操作，超时会播放默认声音 推送内容要添加mutable-content字段并将值设置为true 参考文章 iOS小技能：消息推送扩展的使用 iOS13微信收款到账语音提醒开发总结","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://lazyloading.me/tags/iOS/"}]},{"title":"初识Flutter总结","slug":"flutterstuday","date":"2021-07-22T14:33:55.000Z","updated":"2021-12-22T13:07:04.733Z","comments":true,"path":"flutterstuday/","link":"","permalink":"http://lazyloading.me/flutterstuday/","excerpt":"","text":"[toc] Flutter是什么 Flutter是一个基于Dart语言的跨平台UI框架，目前支持的平台有iOS，android，Web，Mac OS，Windows，Linux，强调这个是因为有部分初学者没接触的时候认为Flutter是一门语言，这是不正确的 环境搭建 Mac和Linux系统设备建议使用Homebrew执行如下命令安装，Windows的话，去看教程 1brew install flutter 安装完默认路径一般为/usr/local/Caskroom/flutter/2.2.0/flutter这个样子 网上有一大堆的教程去叫你怎么搭建环境，这里重复的原因是因为，如果你去按照网上的教程去搭建环境，会感觉，很繁琐，真的很繁琐，特别是iOS开发人员，为什么搭建环境一定要那么多步骤？而Homebrew让这一切变得很简单，只需要一行命令，然后等待网络下载完成就是了 平台支持 已Android studio为例，创建项目时，默认支持iOS和Android，但是可勾选支持Web，Linux和Windows ，Mac OS为不可选，如果需要支持可手动进行配置，命令如下，之后再创建项目就可以勾选相应的其他平台 123flutter config --enable-windows-desktopflutter config --enable-macos-desktopflutter config --enable-linux-desktop 如果想要在已有的项目中添加新的平台，进入项目根目录后执行如下命令 1flutter create . 组件 概括 Flutter里的组件都是Widget，基本可以分为两大类StatefulWidget（可变）和StatelessWidget（不可变）,区别就在于前者可以通过对应的State类去改变内容，所以每一个StatefulWidget都要对应一个State，而后者初始化后就不能再进行改变 Flutter框架本身的组件风格分为两种Material和Cupertino，前者是Google的设计风格，看一下安卓设备大概就能了解到是什么样子，后者是iOS风格也就是Apple的设计风格，网上的教程几乎都是以Material，我在学习的过程中也是使用Material风格的组件，不过这些只是Flutter内置的供你使用的组件，同一个UI你完全可以用这两种风格分别实现 常用Widget Flutter中内置了几百个Widget，包含显示类的文字(Text)，图片(Image)等，也包含不直接显示的容器类Container，Row，Column等，当你入门后，对Flutter有了一定的认知，后续的使用中就是经验的积累，去识记更多的Widget，记得越多，开发越快，下面介绍几种常用的Widget，记住这几个后基本开发一个简单的App就没什么问题了 MaterialApp： 一般用作根Widget，App启动后，main（入口）函数中执行的方法中需要提供 Scaffold： 顾名思义，他是Flutter提供的一个脚手架Widget，自带抽屉，导航等，方便你快速搭起App的结构 Container： 容器类Widget的一种，也是最常用的Widget之一，可以理解为iOS中的UIView Row： 横向布局容器，加入其中的子Widget会水平排列布局 Column： 纵向布局容器，加入其中的子Widget会纵向排列布局 Stack： 叠加布局布局容器，加入其中的子Widget会叠加起来排列布局 ListView： 市面上几乎所有的App都会使用的，列表Widget GridView： 卡片，瀑布流布局 Text： 文字展示 Image： 图片展示 TextButton： 文字按钮 GestureDetector： 如果某个Widget想要响应点击等交互事件，即使它本身不具备交互功能，只要用此Widget包括就可以了 示例： 上面这样的一个布局，觉得是怎样实现的? 结构是这个样子的 层级是这个样子的 响应式 在iOS中，iOS的框架本身是不支持响应式编程的，如果需要，则要借助第三方框架，比如OC的RAC，Swift的RxSwift等，这些框架由于不是官方提供，只是社区为了实现响应式而基于官方框架开发的应用框架，有相当高的额外学习成本 而Flutter本身就是支持响应式的，这为我们的开发提供的很大的便利 原生交互 通过前面的介绍我么你知道Flutter本身是一个UI框架，如果涉及到一些非UI的比如相机拍照，必须要和Native交互调用硬件能力，那我们就必须和Native进行通信，Flutter中提供了三种通信方式 MethodChannel： Flutter 与 Native 端相互调用，调用后可以返回结果，可以 Native 端主动调用，也可以Flutter主动调用，属于双向通信。此方式为最常用的方式， Native 端调用需要在主线程中执行。 BasicMessageChannel： 用于使用指定的编解码器对消息进行编码和解码，属于双向通信，可以 Native 端主动调用，也可以Flutter主动调用。 EventChannel： 用于数据流（event streams）的通信， Native 端主动发送数据给 Flutter，通常用于状态的监听，比如网络变化、传感器数据等。 MethodChannel示例： Flutter端 12345//Flutter端 初始化消息通道 static const MethodChannel _channel = const MethodChannel(&#x27;com.methodChannel&#x27;); //Flutter调用 final Map test = await _channel.invokeMethod(&#x27;methodChannelSend&#x27;); iOS端 123456789//swift端 初始化消息通道 let channel = FlutterMethodChannel(name: &quot;com.methodChannel&quot;, binaryMessenger: registrar.messenger()) //swift端 接收消息channel.setMethodCallHandler &#123; [weak vc](call, result) in if call.method == &quot;methodChannelSend&quot; &#123; print(&quot;flutter给native发消息\\(call.arguments ?? (Any).self)&quot;) &#125; &#125; 库和插件 Flutter是一个UI框架，但是一个完整的App不只有UI展示，还有其他的能力，比如上边提到的硬件调用，录音，定位，网络请求，状态管理，数据持久化等等…这些能力中Flutter本身是不提供支持的，但是我们我们可以借助响应的库来实现，首先说一下库和插件的关系 库是提供特定能力的开发工具包，可以是官方提供，也可以是三方提供 插件是特殊的库，举个例子，比如仅提供iOS和Android调用的库，要知道Flutter支持的平台不止这两个 引入库和插件需要在Flutter项目中的pubspec.yaml中进行配置，下面提供一个我的配置截图： 这里要注意dev_dependencies和dependencies两者的区别，前者指的是，只在开发阶段生效，不参与编译的库，后者指的是，参与编译，运行需要依赖的库，他们是有区别的，举个例子build_runner,json_serializable配合使用的话，可以通过注解，结合如下命令，生成额外的xxx.g.dart文件来帮助我们快速的生成JSON转Model方法，但是xxx.g.dart这个文件只在开发过程中生成和更新，这个库的作用也仅仅是生产这个文件，所以build_runner它本身不参与编译 1flutter packages pub run build_runner build 虽然都写在dependencies中项目也可以正常运行，但是这样的话打出来的包就会变得大一点，可以，但没必要 下面举例一些开发常用的库: dio 三方网络库 webview_flutter官方维护的webview库 cached_network_image图片加载库 sqflite基于sqlite的轻量级数据库框架 pull_to_refresh下拉刷新上拉加载 shared_preferences本地数据存储，适合少量数据 图片资源 我们在开发过程中不免要导入一些静态资源，比如图片，文本文件，音频文件等，我目前只用到了图片资源这里也只介绍图片资源的导入和使用，下面看一下我的图片引入截图，同样是在pubspec.yaml 注意pubspec.yaml文件有着严格的格式要求，对齐有问题都会导致你导入失败，我当时就吃了系统模板的亏 混编 以上介绍的都是纯Flutter项目，什么意思，就是说整个项目的主体是Flutter编写，可能部分功能涉及到和Native交互，但是实际上，很多成熟的项目想要体验Flutter，但是又不敢将整个项目使用Flutter重构，毕竟这中间是有很大风险的，所以我们可以在原生项目中，引入Futter模块，将Native中的某个小模块用Flutter开发来进行体验，这样做的风险我们是可以接受的，下面举一个iOS和Flutter混编并用cocoapods引入的示例 假设fluttermoduledemo是一个iOS原生项目 12//进入到fluttermoduledemo目录的上一级，执行如下命令flutter create --template module flutter_module 其中flutter_module为需要导入iOS的Flutter模块名称，这个模块的目录结构和纯Fluter项目的结构几乎一样，只不过有几个文件夹变成了隐藏文件夹，编写Flutter代码和在纯Flutter项目中没有区别 下面来看一下iOS项目如何引入 1234//在iOS项目的Podfile文件中添加如下配置，其中第一行最后的flutter_module，就是上一步创建的Flutter模块的名称 flutter_application_path = &#x27;../flutter_module&#x27; load File.join(flutter_application_path,&quot;.ios&quot;,&quot;Flutter&quot;,&quot;podhelper.rb&quot;) install_all_flutter_pods(flutter_application_path); iOS使用 123456789101112131415 //在Delegate中初始化Flutter引擎 lazy var flutterEngine = FlutterEngine(name: &quot;ZMEngine&quot;) func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool &#123; flutterEngine.run() GeneratedPluginRegistrant.register(with: self.flutterEngine); return true &#125; //在需要的地方，跳转Flutter模块let vc = FlutterViewController(engine:self.flutterEngine, nibName: nil, bundle: nil) self.present(vc,animated: true, completion: nil); 未完内容 另外还有一些内容也很重要，但是我这里没有展开说的原因是因为，我现在自己也没有搞得很明白，仅仅处于会用的阶段，比如Future涉及到Dart的线程机制，比如状态管理等，我听过一句话唯有深入，才能浅出，而现今我还没有非常深入，所以干脆就不讲，以免误人子弟，只做一个印象级概括 学习参考文档 Flutter学习文档 Dart学习文档 Flutter Package 结尾 这个文档只是我去学Flutter后遇到的一些问题的理解，以及对Flutter整个框架粗略的概括，并非完整教程，类似于你去看电视剧，你需要一集一集的追下去，然后直到结局才能窥见全貌，而这个文档相当于一种剧透，或者说剧情的概括，看完之后脑海中与一个大体的轮廓，这个Flutter是个什么东西，然后你可以去详细的，认真的跟着教程去学习，丰富轮廓内的内容。","categories":[],"tags":[{"name":"Flutter","slug":"Flutter","permalink":"http://lazyloading.me/tags/Flutter/"}]},{"title":"《中国合伙人》台词","slug":"Chinese-partner","date":"2020-05-02T14:56:07.000Z","updated":"2020-05-02T14:57:05.644Z","comments":true,"path":"Chinese-partner/","link":"","permalink":"http://lazyloading.me/Chinese-partner/","excerpt":"","text":"“梦想是什么，梦想就是一种让你感到坚持就是幸福的东西” “我们在这谈了太多的思潮，主义，方法，为什么？因为我们都想找到一个现成的答案，我们都希望有人能够告诉我们应该怎样去生活，其实呢，没有人能告诉我们怎样去生活，因为生活是自己的，我们自己提出的问题应该自己去回答”——孟晓骏语 其实每个人都有自己的人生路要走，无关乎对错，无论最后你活成了什么样，多年后当你能够平淡的和子孙后代说起来时，你的人生，依旧称得上传奇。 “事实证明，一个人迫于无奈下的选择，往往是对的” 所谓的迫于无奈的选择其实早已存在心里，只不过是有其他的选择影响你没有踏出这一步，让你在当时的环境下权衡利弊放弃了而已，而此刻的迫于无奈只是让你认识到，你已经什么都没有没有利弊让你去权衡，也没有退路，必须全力以赴，于是自然而然的选择了曾经抛弃的那个选项。 “实践才是检验真理的唯一标准”——王洋语 “所谓的美国梦，就是在梦想面前人人机会均等，全世界只有美国能做到这一点”——孟晓骏语 当老师在课堂上讲美国的种族歧视问题时，孟晓骏反驳说老师是从书上看来的美国，此时的他们脑海中充满了对未来的畅想和对美国的向往，根本不能容忍有人说灯塔国的半点瑕疵，这和如今我们的绝大多数学生公知多么相似，历史总是在不断地重演，老师则回答他们“too young ,too naive”而他们也在未来用卑微实践证明现实和理想的差距 “成功者总是不约而同的配合时代的需要”（被学校开除时——王洋语） “最大的骗子其实就是我们自己，因为我们总是想改变别人而不愿改变自己”——王洋语 “我们改变不了世界，是世界改变了我们”——王洋语 回想起刚入学时，大家意气风发，挥斥方遒，孟晓骏曾问哪一个词可以代表我们这代人，最后得出结论，是改变，改变自己，改变身边每一个人，改变世界， “你还年轻，你可以走的更远”——（孟晓骏餐厅洗盘子收小费） 你还年轻，你可以成为任何你想成为的人，去做任何你想去做的事，现状已经很糟糕了，难道还会更糟糕吗，中国有个成语叫否极泰来，人会变事也会变，或许后天就是晴天。 “掉在水里你不会淹死，呆在水里你才会淹死” 学如逆水行舟，不进则退，什么都不做就什么都没有 “我不走了，我留下来，成冬青，我以后跟你混” 对应孟晓骏出国时说的那句话，我不回来了，只有经历过真实的美国，只有让他这样从小就自信心慢慢想要改变世界的人经历失败才能说出这种话，同时，也只有他自己知道说出这句话有多无奈和痛苦，这一刻，他才认清现实，才切身体会到了王洋在ktv说的那句话的含义，“我们改变不了世界，是世界改变了我们” “你有什么成功的公式吗？”“有吗？至少我不知道” 每个人的成功都是偶然和必然的结合，那么每个人的成功当然也是不可复制的，你的经验在另一个人身上不一定百分之百适用，就像我们购买商品是外包装上总会标上一句，图案仅供参考，我们了解他人经验的目的只有一个，得出自己的成功公式，同样，孟晓骏回国后将当时美国的一些先进的思想，模式拿来给成冬青去看，成冬青也是先质疑，然后尝试，最后将这些本土化 “当你意识到失败只是弯路，你就已经走在了成功的直道上” 成功本就是一次一次的失败，一次一次的复盘最后的奖励，当你认识到意识到问题所在是，你也就踏出了收获成功的第一步 “美国人炸了大使馆，你们就来砸英语学校，外星人炸了地球，你们要去砸航天部吗” 这句话出在南斯拉夫大使馆被炸事件之后，当时激起了国人的爱国主义思潮，但同时也让我们看到了群众的盲目和反智。 “你们和三十年前有什么区别，就知道窝里横，中国人打中国人，懦夫” 当人们的情绪无法得到正常的宣泄，往往会将目标转向和它相关的实物，这时的人们是没有理智可言的，他们急于证明自己的勇气正义，阻碍他们的一切都是他们的敌人 “做买卖的，低头弯腰下跪是基本功夫，小姐心态寡妇待遇，复联追求” “重要的不是成功，而是你不能没有尊严——苏梅语” 看看孟晓骏的经历，看看新梦想的经历，对，人不能没有尊严，所有的关于成功所做的一切，都只是为了让你活得更有尊严。 “如果额头终将刻上皱纹，你只能做到，不让皱纹刻在心上” 或许这句话是对所谓的赤子之心 不忘初心最白话的解释了 “成冬青压根就没想去改变世界，但它能做到，不被世界改变，永远的土鳖下去” 这是在前文ktv包间里对王洋那一番话的回答，成冬青从来都没有什么雄心壮志，当他两次高考失利的时候，能有第三次机会，能进入大学校门就已经是对他最大的奖赏，他永远关注当下，当所有人都在畅想未来的时候，需要有人告诉世界如何践踏实地。 孟晓骏计划了四年的上市计划，包括从加入新梦想后提的几十个商业计划，一直到差点和成冬青决裂，其实只是想挽回自己的尊严，想证明自己的价值，所以他在美国的经历回来后没有向王洋和成冬青说起，一次都没有，成冬青送给孟晓骏300平大房子的时候王洋说他不知道孟晓骏要什么，对，没有人知道一个从小接受良好的教育，从小自信满满要改变世界的人遭遇了重大失败后的内心世界是怎样的，当孟晓骏第三次到美国，并且是他们三人因为教材侵权问题一起到美国的时候，孟晓骏带他们来到自己曾经工作过的餐厅，讲述了自己前两次来美国的经历，这两人才知道他受到了怎样的打击，从一个一无所有心怀壮志的学生，到身价不菲事业有成的成功人士，他的所有身份都没有得到他想要的尊重，在第二次来美国将要离开的时候，他在时代广场看到新浪在纳斯达克上市的巨大版幅消息，或许此时他心里想，原来是这样，原来上市就能被这群美国佬正视，这唤回了他曾经的傲气与自信，他必须要获得应有的尊重。 最终，成冬青的一番演讲让美国人认识到无数平凡的中国学生的真实状况，并且，为新梦想和孟晓骏，赢得了尊重。 这是一个改变世界和被世界改变的故事，所以，锋芒外漏的孟晓骏活成了成冬青，永远土鳖的成冬青，活成了孟晓骏，就连罗曼蒂克的诗人王洋也不得不说一句真正的感情是安安静静就会来的一点都不折腾。 最后，愿我们的心上永远都不会出现皱纹，永远的土鳖下去。","categories":[],"tags":[{"name":"电影台词","slug":"电影台词","permalink":"http://lazyloading.me/tags/%E7%94%B5%E5%BD%B1%E5%8F%B0%E8%AF%8D/"}]},{"title":"《你是我兄弟》台词摘录","slug":"My-brother","date":"2020-04-30T10:35:41.000Z","updated":"2020-05-02T14:57:45.038Z","comments":true,"path":"My-brother/","link":"","permalink":"http://lazyloading.me/My-brother/","excerpt":"","text":"第六集 “啥叫生意？生意就是让人生变得不可思议” “你别以为商人身上就充满铜臭，你仔细想想，钱就是钱，钱不臭啊，跟钱有啥关系，只要人心不臭，钱就不臭” 第七集 “卑鄙是卑鄙者的通行证，高尚是高尚者的墓志铭，看吧，在那镀金的天空中，飘满了死者弯曲的倒影” “冰川纪过去了，为什么到处都是冰凌，好望角发现了，为什么死海里千帆相竞，我来到这个世界上，只带着纸 绳索 和身影” “我不想第二次被打败，所以，我就不打 – 一枝花” “你现在用百分之百的努力辛勤耕耘，但是你只用百分之一的心情期待收获，免得你失恋了活不下去” “让你不断回忆的，一定是你没有得到的，正因为人们要不断地回忆，所以现在要尽最大可能地把它美好了，别等到你该回忆的时候你突然发现自己没什么可以回忆的，那人生就惨点喽”","categories":[],"tags":[{"name":"电影台词","slug":"电影台词","permalink":"http://lazyloading.me/tags/%E7%94%B5%E5%BD%B1%E5%8F%B0%E8%AF%8D/"}]},{"title":"OCLint静态代码校验初探","slug":"OCLint静态代码校验初探","date":"2020-03-19T13:04:41.000Z","updated":"2020-04-30T13:23:37.508Z","comments":true,"path":"OCLint静态代码校验初探/","link":"","permalink":"http://lazyloading.me/OCLint%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E6%A0%A1%E9%AA%8C%E5%88%9D%E6%8E%A2/","excerpt":"","text":"OCLint静态代码校验初探 “OCLint是一个能够让我们的OC，C，C++代码变得更加优雅的检测分析工具–鲁迅” OCLint的目的 在开发过程中，特别是团队协作开发中，规范的重要性不言而喻，他可以降低沟通成本，增加代码可读性与可维护性提高可靠性与健壮性，作为一名优秀的开发人员，我们应该不断完善并严格遵守相关规范，但是实际情况是，由于我们的疏忽，或者工期的紧张等因素，导致在某些时候开发过程中变得随心所欲，代码变得为所欲为，进而对后期的维护造成不良影响，甚至原地crash&gt;_&lt;!，而OCLint可以帮助我们来检查代码是否遵守了某些规范，是否存在一些潜在的问题，降低review成本。 OCLint能检测哪些问题 附官方文档OCLint 代码长度，过长或过短，包含方法，变量等 未使用的代码，包括变量和方法 代码复杂度，多重循环以及多重判断等 语法错误 OCLint安装 OCLint有多种安装方式，此处采取Homebrew安装，so 默认你的电脑已经安装了Homebrew,如果没安装，请先去安装Homebrew,一次就够，你会爱上它的😊 12brew tap oclint/formulaebrew install oclint 为什么要执行第一句？因为要先安装OCLint的依赖，否则会报错，安装结束执行： 1oclint --version 如果出现类似下面的信息，说明安装成功 123456789LLVM (http://llvm.org/):LLVM version 5.0.0svn-r313528Optimized build.Default target: x86_64-apple-darwin18.6.0Host CPU: skylakeOCLint (http://oclint.org/):OCLint version 0.13.Built Sep 18 2017 (08:58:40). 紧接着安装xcpretty这个东西是什么呢？它可以格式化xcodebuild的输出，增加可读性并可以生成报告,执行下面命令安装 1sudo gem install xcpretty 安装结束检查是否安装成功 1xcpretty -v 如果出现类似下面的版本号信息说明安装成功 10.3.0 OCLint使用 OCLint作为静态代码检测工具是可以直接在Xcode中使用的，也可以在终端进行操作，本文介绍的是终端操作方式，Xcode使用后续补充；首先进入项目根目录执行如下命令： 12xcodebuild clean xcodebuild analyze | tee xcodebuild.log 这一步会对项目进行分析并会在根目录生成一个build目录，并将分析日志输出在xcodebuild.log文件中 1xcodebuild |xcpretty -r json-compilation-database -o compile_commands.json 这一步是将编译结果输出在compile_commands.json文件中,这里有一个点要注意的就是，如果你已经编译过并将结果输出在compile_commands.json中，那么再次编译时已编译过的内容是不会被覆盖的，如果希望每次都重头操作，那么可以使用xcodebuild clean命令清除缓存，这也是第一步执行此命令的原因。 最后一步是将分析结果生成报告，这中间就会用到各种校验规则了，OCLint默认有些规则，包含了可能出现的大部分场景，当然也可以根据OCLint提供的方法自定义规则,执行如下命令生成报告 1234567891011121314oclint-json-compilation-database -e Pods -- -report-type html -rc CYCLOMATIC_COMPLEXITY=5 -rc TOO_MANY_PARAMETERS=8-rc NESTED_BLOCK_DEPTH=5-rc LONG_LINE=200 -rc NCSS_METHOD=50-rc LONG_VARIABLE_NAME=30 -rc SHORT_VARIABLE_NAME=2-rc LONG_CLASS=1500-rc LONG_METHOD=150-disable-rule ShortVariableName -max-priority-1=10000 -max-priority-2=10000 -max-priority-3=10000 &gt; report.html 最终会在根目录生成一个report.html文件，点击打开可查看分析结果，大概是下面这个样子 另外上述出现的操作命令为了简便写了一个脚本，仅做参考，需要的自取 因为我此处只是为了展示，所以创建了一个空项目，并没有写内容，所以分析报告一片空白😂😂😂 本篇文章只做OCLint使用的初步介绍，实际上我在安装使用的过程中遇到了很多必然或偶然的坑，另外对于OCLint也并没有做详细的介绍，比如OCLint默认规则的介绍，如何自定义规则，相关套件的作用，以及OCLint的缺点等等，随后有时间我会一一整理补充上来。嗯，就酱~","categories":[],"tags":[{"name":"OCLint","slug":"OCLint","permalink":"http://lazyloading.me/tags/OCLint/"}]},{"title":"Pod库创建流程（下）","slug":"Pod库创建流程（下）","date":"2019-07-28T07:41:41.000Z","updated":"2021-07-22T15:37:42.419Z","comments":true,"path":"Pod库创建流程（下）/","link":"","permalink":"http://lazyloading.me/Pod%E5%BA%93%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/","excerpt":"","text":"[TOC] 创建pod库流程(下) 前边讲了pod库默认工程模板的创建，文件添加存放路径，代码编写位置等基本信息，今天简单说下spec文件的编写及推送。 第一步 首先我们打开pod库的spec文件,以DYTest项目为例： 其中红色箭头所指的就是项目的spec文件，红色方框内就是pod默认的spec文件的内容，里边有很多字段分别对应不同的配置信息，但一般来说我们只需要配置其中的几项就可以，其他的可以暂时删掉。 删完之后大概如下图： 123456789101112131415161718Pod::Spec.new do |s| s.name = &#x27;DYTest&#x27; s.version = &#x27;0.1.0&#x27; s.summary = &#x27;A short description of DYTest.&#x27; s.description = &lt;&lt;-DESCTODO: Add long description of the pod here. DESC s.homepage = &#x27;https://github.com/lazyloading@163.com/DYTest&#x27; s.license = &#123; :type =&gt; &#x27;MIT&#x27;, :file =&gt; &#x27;LICENSE&#x27; &#125; s.author = &#123; &#x27;lazyloading@163.com&#x27; =&gt; &#x27;lazyloading@163.com&#x27; &#125; s.source = &#123; :git =&gt; &#x27;https://github.com/lazyloading@163.com/DYTest.git&#x27;, :tag =&gt; s.version.to_s &#125; s.ios.deployment_target = &#x27;8.0&#x27; s.source_files = &#x27;DYTest/Classes/**/*&#x27; # s.dependency &#x27;AFNetworking&#x27;, &#x27;~&gt; 2.3&#x27;end 其中 s.name : 你所创建的库的名字，比如Masonry，AFNNetworking等等 s.version ： 库的版本号 s.summary ： 简短的描述信息 s.description ： 比简短描述长一点的描述信息 s.homepage ： pod库远程仓库主页地址 我们此次的示例工程的主页就是 http://git.zhcs.com/iOS_Group/DYTest s.license ： 遵守的协议 s.author ： 创建人 s.ios.deployment_target ： 支持的系统版本版本此次示例工程支持到iOS 8.0 s.source ： 你的pod库的远程仓库路径，我们此次的示例工程的路径就是http://192.168.120.30/iOS_Group/DYTest.git s.source_files = 要加入库中的代码在工程中的路径，此次示例工程编写的代码就在之前强调的'DYTest/Classes/**/*'路径下 第二步 当库每个版本代码编写完成后我们需要将pod库代码提交到对应的远程仓库，同时对应的spec文件也要推送到spec文件远程仓库。 第一步我们完成了spec文件的编写，第二步我们就要推送spec文件，此次示例工程我们的spec文件远程仓库就是我们前文所创建的http://192.168.120.30/iOS_Group/DYTestSpecs.git 我们先对spec文件做一个本地校验看看是否有配置错误： 进入spec文件所在目录 执行命令 1pod lib lint 当你在spec文件所在目录并且只有一个spec文件时候你可以这么写，否则你需要指定你要校验的spec文件用如下写法 1pod lib lint DYTest.podspec 执行结果如下： 第一次执行pod lib lint 未成功，报出了⚠️其实这些警告可以忽略，我们只需要加上--allow-warnings参数，可以看到我们第二次执行成功了，如果你想看校验过程还可以在后边添加--verbose参数 但是只是做本地校验还不够，毕竟我们的库并不是自己玩玩，是需要让其他人也用的，这就需要推送的远端，远端推送之前就需要进行远端校验，不仅查看语法是否正确，也查看你在远端的代码版本和spec文件中的是否匹配。 我们先给代码打个tag,然后把tag推送到远程，tag版本需要和spec文件中的s.version一致，此处前边我们spec文件中s.version写的是0.1.0 至此tag已经打完并推送成功，接下来就是对spec文件进行远程校验 操作和本地校验类似只不过命令不同，执行命令 1pod spec lint --allow-warnings 结果如下 或者我们很自信spec文件绝对没问题，这时候也可以不校验直接推 1pod repo push DYTestSpecs *.podspec --sources=http://192.168.120.30/iOS_Group/DYTestSpecs.git,https://github.com/CocoaPods/Specs.git --use-libraries --allow-warnings --verbose 结果如下: 一次成功，完美，这里忍不住给自己鼓掌，整个操作行云流水一气呵成如德芙版丝滑中途没出现一点意外和错误，嘴角不自觉扬起了迷人的弧度 不过这句命令很长有必要给大家解释下每一部分的含义不然你只会知其然不知其所以然，看看看看，出口成章，小伙子学着点以后要多读书啊。 其中DYTestSpecs是我们第一篇里讲的，添加进本地repo目录下的示例工程对应的spec工程。 *.podspec中*指通配符，这么写指以.podspec为后缀的文件,你也可以指定对应的spec文件，比如我们的示例工程就可以写成 DYTest.podspec。 --sources指的是要将本地repo目录下DYTestSpecs工程推送的远端路径，如果你只想公司内部使用就可以不写后边的https://github.com/CocoaPods/Specs.git 第三步 创建，编写，校验，推送都完成了，接下来就是使用了，我们先search试一下看能不能搜到我们的库 1pod search DYTest 嗯，放心了，搜索的到，那么，接下来，就不用我多说了吧，开始愉快的使用吧~ **后记：**这两篇文章主要说的是私有pod库的创建，编写及推送流程，实际具体使用过程中可能还会遇到其他问题导致你用的头大，比如操作顺序出错导致配置了不可逆的错误环境，操作的天时不对，坐的位置风水不好等等，总之就是很多不可控，玄学问题，这个在这篇文章就不一一细说，后边有问题可以直接问，或者有时间转门写一下。","categories":[],"tags":[{"name":"Cocoapods","slug":"Cocoapods","permalink":"http://lazyloading.me/tags/Cocoapods/"}]},{"title":"Pod库创建流程（上）","slug":"Pod库创建使用（上）","date":"2019-07-25T02:38:41.000Z","updated":"2021-07-22T15:39:07.062Z","comments":true,"path":"Pod库创建使用（上）/","link":"","permalink":"http://lazyloading.me/Pod%E5%BA%93%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/","excerpt":"","text":"[toc] 创建pod库流程(上) 第一步 创建本地私有库，pod lib create 为创建pod模板工程命令``DYTest为私有库名称 1pod lib create DYTest 结果如下图所示,命令默认会在当前所在目录下创建，图中所示路径为桌面 第二步 创建远程仓库，进入刚才创建的DYTest工程根目录将本地创建的私有库工程与远程仓库关联起来，具体操作如下所示： 第三步 创建远程Spec文件仓库并添加到到本地repo目录，repo目录在本地cocoapods安装目录下，Spec文件为pod工程描述文件，里边可编辑pod库的所有配置信息，名称，地址，支持平台，版本，依赖库等等. pod repo add为本地pod添加spec文件命令DYTestSpecs为要添加的spec目录的名称http://192.168.120.30/iOS_Group/DYTestSpecs.git为远程Spec文件仓库地址。 注意：一个Spec文件仓库可以存放多个pod库的Spec文件 1pod repo add DYTestSpecs http://192.168.120.30/iOS_Group/DYTestSpecs.git 结果如下: 第四步 至此我们便可以着手在pod库里进行代码编写工作，由此流程创建的pod库文件根目录结构大概如下图所示： 其中Example文件夹为pod模板自带的示例工程，我们在pod库中编写的代码可通过此示例工程进行调试，DYTest文件夹为我们将要编写代码的物理路径，目录结构如下: Classes文件夹即我们编写的pod库代码所在的文件物理路径 下面我们打开项目看一下： 其中创建时路径不要选错，是在Classes文件夹下箭头所指的文件为我们当前pod库的spec文件，将来如果要发布被他人搜索使用就需要编写此spec文件对应信息并将其推送单刚才创建的远程spec仓库DYTestSpecs中。 绿色箭头所指为我们的Example示例工程目录。 红色箭头所指为我们pod库工程代码目录，此目录为虚拟文件夹，其下文件物理路径为前文所述的Classes文件夹,一定要注意创建文件时候不要选错存放路径，应该存放在Classes下。 每当我们添加新的文件时需要进入Example目录下进行update操作，这样创建的文件会自动加入工程，不进行update操作你的文件在使用时将会提示not found,具体操作如下所示: 创建时路径不要选错，是在Classes文件夹下 下面进行update操作 注意路径，是在Example目录下进行update,完成后我们新创建的文件就可以import使用了 当一天的工作完成后需要进行代码提交，那么我们进入项目根目录进行代码提交， 分支根据情况自行选择，此处我选择master，pod库创建的简单流程及代码编写大体就这样，下次详细说一下spec文件的编写以及pod库某一阶段完成后打tag，进行推送以供他人search``install的流程。","categories":[],"tags":[{"name":"Cocoapods","slug":"Cocoapods","permalink":"http://lazyloading.me/tags/Cocoapods/"}]}],"categories":[],"tags":[{"name":"年终总结","slug":"年终总结","permalink":"http://lazyloading.me/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"},{"name":"iOS","slug":"iOS","permalink":"http://lazyloading.me/tags/iOS/"},{"name":"Mysql","slug":"Mysql","permalink":"http://lazyloading.me/tags/Mysql/"},{"name":"Flutter","slug":"Flutter","permalink":"http://lazyloading.me/tags/Flutter/"},{"name":"电影台词","slug":"电影台词","permalink":"http://lazyloading.me/tags/%E7%94%B5%E5%BD%B1%E5%8F%B0%E8%AF%8D/"},{"name":"OCLint","slug":"OCLint","permalink":"http://lazyloading.me/tags/OCLint/"},{"name":"Cocoapods","slug":"Cocoapods","permalink":"http://lazyloading.me/tags/Cocoapods/"}]}